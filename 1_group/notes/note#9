# 객체지향 프로그래밍 정리 14주차

---

예제 12-1 키보드로 입력 받아 텍스트 파일 저장하기

코딩한 사람 : 최영민
정리한 사람 : 윤선영

- 이 문제의 핵심 포인트
    
    입출력 연산자에 대한 이해를 바탕으로 입출력관련 메서드를 잘 사용할 수 있는지가 핵심 포인트
    
- 이 문제에 대한 접근 방법
    
    어떤 항목을 입력받고 어떤 항목을 출력해야 하는지 잘 구분한 후 그에 맞는 입출력 메서드를 사용하여 프로그램을 작성
    
- 내가 짠 코드
#include <iostream>
#include <fstream>
using namespace std;
int main() {
char name[10], dept[20];
int sid;
cout << "이름>>";
cin >> name;
cout << "학번>>";
cin >> sid;
cout << "학과>>";
cin >> dept;
ofstream fout("c:\\temp\\student.txt");
if(!fout) {
cout << “c:\\temp\\student.txt 파일을 열 수 없다";
return 0; }

fout << name << endl;
fout << sid << endl;
fout << dept << endl;
fout.close();
}

- 실행 결과
이름>>kitae
학번>>20131111
학과>>computer

---

예제 12-3 get()을 이용한 텍스트 파일 읽기 

- 이 문제의 핵심 포인트
Get을 이용한 텍스트 파일 읽기
- 이 문제에 대한 접근 방법
ifstream을 이용하여 파일에 접근하고 get()을 통해서 파일에서 문자를 읽음
- 내가 짠 코드
#include <iostream>
#include <fstream>
using namespace std;
int main() {
const char* file = "c:\\windows\\system.ini";
ifstream fin(file);
if(!fin) {
cout << file << " 열기 오류" << endl;
return 0;
}
int count = 0;
int c;
while((c=fin.get()) != EOF) {
cout << (char)c;
count++;
}
cout << "읽은 바이트 수는 " << count << endl;
fin.close();
- 코드를 짜면서 어려웠던 점
파일에서 문자를 읽을 때 get()을 사용한다는 점이 아직 익숙치 않아서 쉽게 잘 떠오르지 않음
- 실행 결과
; for 16-bit app support
[386Enh]
woafont=dosapp.fon
EGA80WOA.FON=EGA80WOA.FON
EGA40WOA.FON=EGA40WOA.FON
CGA80WOA.FON=CGA80WOA.FON
CGA40WOA.FON=CGA40WOA.FON
[drivers]
wave=mmdrv.dll
timer=timer.drv
[mci]
읽은 바이트 수는 206r

---

예제 12-5 istream의 getline()을 이용하여 텍스트 파일을 읽고 화면 출력

- 이 문제의 핵심 포인트
Getline을 이용한 텍스트 파일 읽기
- 이 문제에 대한 접근 방법
ifstream을 이용하여 파일에 접근하고 getline()을 통해서 텍스트 파일을 읽음
- 내가 짠 코드
#include <iostream>
#include <fstream>
using namespace std;
int main() {
ifstream fin("c:\\windows\\system.ini");
if(!fin) {
cout << "c:\\windows\\system.ini 열기 실패" << endl;
return 0;
}
char buf[81]; // 한 라인이 최대 80개의 문자로 구성된다고 가정
while(fin.getline(buf, 81)) {
cout << buf << endl;
}
fin.close();
}
- 코드를 짜면서 어려웠던 점
파일에서 문자를 읽을 때 getline()을 사용한다는 점이 아직 익숙치 않r고 get()과 비슷한 부분이 있어서 혼란스러웠음
- 실행 결과
; for 16-bit app support
[386Enh]
woafont=dosapp.fon
EGA80WOA.FON=EGA80WOA.FON
EGA40WOA.FON=EGA40WOA.FON
CGA80WOA.FON=CGA80WOA.FON
CGA40WOA.FON=CGA40WOA.FON
[drivers]
wave=mmdrv.dll
timer=timer.drv
[mci]

---

예제 12-9 read() / write() 로 이미지 파일 복사

- 이 문제의 핵심 포인트
Read/write 로 이미지 파일 복사하기
- 이 문제에 대한 접근 방법
ifstream을 이용하여 파일에 접근하고 read()와 write()을 사용하여 파일 내용을 읽고 배열에 저장하여 목적 파일에 기록함
(따로 파일 경로를 저장 한 후 소스 파일에서 목적파일로 복사해야함)
- 내가 짠 코드
#include <iostream>
#include <fstream>
using namespace std;
int main() {
const char* srcFile = "c:\\temp\\tulips.jpg";
const char* destFile = "c:\\temp\\copytulips.jpg";
ifstream fsrc(srcFile, ios::in | ios::binary);
if(!fsrc) {
cout << srcFile << " 열기 오류" << endl;
return 0;
}
ofstream fdest(destFile, ios::out | ios::binary);
if(!fdest) {
cout << destFile << " 열기 오류" << endl;
return 0;
}
    
    char buf[1024];
    while(!fsrc.eof()) {
    fsrc.read(buf, 1024);
    int n = fsrc.gcount();
    fdest.write(buf, n);
    }
    cout << srcFile << "을 " << destFile << "로 복사 완료" << endl;
    fsrc.close();
    fdest.close();
    }
    
- 코드를 짜면서 어려웠던 점
    
    그동안 터미널을 이용한 명령어를 통해서 파일을 복사한 적은 있었지만 코드를 통해서 파일을 복사해본적은 없어서 새로운 경험이었음 또한 파일의 최대 크기를 내가 설정하게 되면서 적절한 크기를 얼마로 설정할지 고민하게 됨
    
- 실행 결과
c:\temp\tulips.jpg을
c:\temp\copytulips.jpg로 복사 완료

---

예제 13-4 0으로 나누는 예외 처리

- 이 문제의 핵심 포인트
예외 발생시 예외 처리하는 방법

- 이 문제에 대한 접근 방법
예외가 발생하는 경우 try-catch를 사용하여 예외를 처리함

- 내가 짠 코드
#include <iostream>
using namespace std;
int main() {
int n, sum, average;
while(true) {
cout << "합을 입력하세요>>";
cin >> sum;
cout << "인원수를 입력하세요>>";
cin >> n;
try {
if(n <= 0)
throw n;
else
average = sum / n;
}
catch(int x) {
cout << "예외 발생!! " << x << "으로 나눌 수 없음" << endl;
average = 0;
cout << endl;
continue;
}
cout << "평균 = " << average << endl << endl;
}
}

- 실행 결과
합을 입력하세요>>15
인원수를 입력하세요>>5
평균 = 3
합을 입력하세요>>12
인원수를 입력하세요>>-3
예외 발생!! -3으로 나눌 수 없음
합을 입력하세요>>25
인원수를 입력하세요>>0
예외 발생!! 0으로 나눌 수 없음
합을 입력하세요>>

- try-catch 문을 사용하지 않고 프로그램을 실행시켰을 때의 결과
    
    합을 입력하세요>>15
    인원수를 입력하세요>>5
    평균 = 82935808
    
    합을 입력하세요>>12
    인원수를 입력하세요>>-3
    평균 = 82935808
    
    합을 입력하세요>>24
    인원수를 입력하세요>>0
    평균 = 82935808
    
    합을 입력하세요>>
    
    → 우리가 원하는 결과값이 나오지 않는 것을 알 수 있음
    
- 의문점
    
    최영민, 윤선영 : 예외처리를 하는 방법에는 try - catch 문만 존재할까?
    
    구글 답변 ( C++ 언어에서 사용할 수 있는 예외처리 방법들)
    
    1. **`std::terminate`와 `std::unexpected`:**
        - **`std::terminate`** 함수는 예외가 처리되지 않았을 때 호출되며, 프로그램을 종료시킴
        - **`std::unexpected`** 함수는 예외가 처리되지 않았을 때 호출되며, 기본적으로 **`std::terminate`**를 호출함
    2. **RAII (Resource Acquisition Is Initialization):**
        - C++에서는 RAII 디자인 패턴을 사용하여 리소스 관리를 통해 예외 안전성을 확보함 스마트 포인터, RAII 객체, 및 다양한 리소스 관리 클래스를 통해 자원 해제를 자동으로 처리할 수 있음
    3. **`std::exception` 클래스:**
        - 대부분의 C++ 표준 예외 클래스는 **`std::exception`** 클래스를 상속받음 이를 이용하여 사용자 정의 예외 클래스를 만들고, 예외 처리에서 범용적으로 사용할 수 있음
    4. **`try`, `catch`, `throw`:**
        - **`try`**: 예외가 발생할 수 있는 코드 블록을 정의
        - **`catch`**: 특정 유형의 예외를 처리하는 블록을 정의합니다. 여러 **`catch`** 블록을 사용하여 여러 예외 유형을 처리할 수 있음
        - **`throw`**: 예외를 명시적으로 발생시키는 데 사용
