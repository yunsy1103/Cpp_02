# 객체지향 프로그래밍 2주차

최영민 윤선영 공통 의견

- 기계어 : 이진수 (0과 1)로 이루어져 있음 말그대로 컴퓨터에서 사용 되는 언어로 인지하고 있음
- 어셈블리어 : 정확하게는 모르지만 대충 아스키 코드 처럼 컴퓨터와 인간 사이에 소통할수 있게 해주는 중간 역할을 한다고 알고 있음
- 고급언어 : 인간이 컴퓨터를 제어하기 위해 사용하는 언어이며 주로 복잡한 작업을 인간의 생각대로 표현할 수 있도록 설계되어있다고 알고있음 우리가 고급언어로 프로그래밍을 했을때 컴파일러가 어셈블리어를 통해 기계어로 바꿔준다고 인지하고 있음  대표적으로 JAVA, C, C++ 기타 등등

<최영민>

→ 고급언어에서 컴파일러가 중간역할로 어셈블리어를 통해 기계어로 변환해주는 과정이 맞는지 정확하게 인지하고 있지 않아서 토의를 통해 맞다고 확인함

<윤선영> 

→ 어셈블리어와 기계어에 대해서 완벽한 답을 내리진 못했지만 어느정도의 개념을 인지함 고급언어가 인간이 컴퓨터를 제어하고 복잡한 작업을 하기 위해 사용하는 언어임을 알고 ppt및 토의를 통해 알고 있는 정보를 다시한번 확인함

---

캡슐화

둘다 개념이 정확하게 기억나지 않아서 찾아보았음

캡슐화 : 외부에서 직접적인 접근을 막기 위해서 탄생한 개념

상속 : 일정한 코드를 재사용하여 적은 양의 코드로도 많은 기능을 낼 수 있는 개념

다형성 : 부모타입의 참조변수로 자식타입의 객체를 다루는 것

<최영민> 

→ 자바를 배우지 않아서 캡슐화가 어떻게 가능한지에 대해 의문을 가졌음

윤선영 설명 → private라는 코드를 사용하여 아무나 접근하지 못하도록 접근을 막는다

최영민 의문 → private안에 존재하는 정보를 수정할 때는 어떤 과정이 필요한가?

답변 : 인터넷 검색을 통해 private 변수 안에 메서드를 정의하여 그 메서드를 통해 private에 대한 코드를 통제한다는 것을 알게됨

<윤선영 생각>

캡슐화가 private을 사용하여 외부의 접근을 막는 것은 알고 있었지만 개념에 대해선 자세히 알지 못하여 인터넷 과 토의를 통해서 좀 더 자세히 알게 되었음

---

C언어에 추가한 기능

<최영민 설명 가능> 

- overriding → 부모로 부터 상속 받은 메서드를 추가적으로 다룰 수 있는것
- overloading  → 한 클래스 내에 같은 이름으로 동작하는 메서드가 존재하는 것

<윤선영 설명 가능>

- 참조와 참조 변수 : 한 객체가 다른 객체를 연결하는 수단으로 다른 객체나 값에 대한 것을 별명을 붙여 다시 설명해주는 역할을 하는 변수이다

---

<최영민>

- 캡슐화 :데이터를 외부의 접근으로 부터 보호하며 private 사용하고 만약 이 데이터를 공개하고싶으면 public을 사용하면 됨
- 객체 : class라는 객체에 대한 설명이 담겨져 있는 코드가 있고 그 설명에 맞는 객체를 생성하면서 여러가지 행동을 수행

<윤선영> 

- 캡슐화 : private를 사용하면서 데이터를 외부로부터 접근이 되면서 함부로 사용되어지는 것을 막는 역할을 함
- 클래스 : 객체를 만들어주는 틀로서 클래스를 통해 객체 생성을 하게 됨

---

다형성과 상속성

<최영민>

다형성 : 하나의 함수를 여러가지 상황에서 똑같이 사용할 수 있게 해주고 이를 통해서 개발자가 일일이 그 함수를 사용할 때 상황에 맞는 설정을 해주지 않아도 간편하게 함수를 사용할 수 있을것이라는 생각이 들었음

상속성 : 일단 공통된 코드를 필요로 하는 여러곳에서 상속을 받아 사용하면서 코드의 길이가 좀더 간편해졌고 c언어의 경우 공통된 부분을 수정해야 하는 상황이 발생했을 때 그 코드를 사용하는 모든 부분을 수정해야하지만 상속성을 이용하게 될 경우 공통되는 부분을 상속받아서 코드를 사용하도록 프로그래밍을 할 수 있기 때문에 공통된 부분을 수정하게 될 경우 모든 코드를 한번에 수정할 수 있다는 엄청난 장점이 생겼다는 것을 알게 되었음 

다형성과 상속성 모두 코드를 간결하게 해주고 개발을 좀더 쉽게 할 수 있도록 도와주는 개념임을 알게 되었음

<윤선영> 

하나의 객체가 여러가지 타입을 가질 수 있는 것으로 여러 형태를 받아들일 수 있고 상황에 따라 의미를 다르게 부여하는 것으로 개념을 이해를 하였다. 다형성은 기능이 상황에 따라 다르게 작동할 수 있으므로 기능을 확장하거나 객체 변경시 사용할 수 있다

상속은 상위 클래스의 특성을 하위 클래스가 상속 받아서 기존 클래스의 코드의 특성을 재사용 하고 코드를 추가하여 확장을 시켜 확장된 코드를 만들어 낼 수 있다. 상속을 사용함으로써 기존의 코드를 확장하고 개선하는데 용이 하게 해주는 중요한 객체지향 개념이라고 생각한다            
