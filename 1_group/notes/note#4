# 객체지향 프로그래밍 9주차

코딩한 사람 : 윤선영
정리한 사람 : 최영민

- 이 문제의 핵심 포인트
friend를 사용하여 외부 함수가 접근 가능하도록 하는 것
- 이 문제에 대한 접근 방법
    
    equals()를 프렌드 함수로 선언하고 이 함수를 통해 private 속송얼 가진 width, height에 접근
    
- 내가 짠 코드
    
    #include <iostream>
    using namespace std;
    class Rect;
    bool equals(Rect r, Rect s);
    class Rect {
    int width, height;
    public:
    Rect(int width, int height) { this->width = width; this->height = height; }
    friend bool equals(Rect r, Rect s);
    };
    bool equals(Rect r, Rect s) {
    if(r.width == s.width && r.height == s.height) return true;
    else return false;
    }
    int main() {
    Rect a(3,4), b(4,5);
    if(equals(a, b)) cout << "equal" << endl;
    else cout << "not equal" << endl;
    }
    
- 코드를 짤때 어려웠던 점
    
    friend 함수를 처음 사용해보아서 어색했지만 잘 사용하게 된다면 캡슐화의 원칙을 어기지 않고 함수에 접근이 가능할 것 같다고 생각했음.
    
- 실행 결과
    
    /Users/sunyeong/CLionProjects/untitled/cmake-build-debug/untitled
    not equal
    
    Process finished with exit code 0
    
- 선언부분과 프렌드 함수 선언 부분을 지우고 컴파일 했을 때 발생하는 에러코드
    
    main.cpp:9:10: error: 'width' is a private member of 'Rect'
    if(r.width == s.width && r.height == s.height) return true;
    ^
    
    main.cpp:4:9: note: implicitly declared private here
    int width, height;
    ^
    
    main.cpp:9:21: error: 'width' is a private member of 'Rect'
    if(r.width == s.width && r.height == s.height) return true;
    ^
    등등 많은 오류 발생
    
    → 클래스가 선언되기 전에 먼저 참조를 했기때문에 발생되는 오류
    
    클래스에 먼저 선언해주어야  private 데이터에 접근 가능
    
- 프렌드 개념을 배우면서 든 의문
    
    최영민 : 객체 지향 코드에서는 캡슐화의 원칙이 중요한데 private가 선언되고 그 함수에 대한 상속이나 다른 방법으로 접근할 수 있는 방법이 있을 것 같은데 굳이 왜 friend 개념을 쓰는지?
    
    구글에서 찾아본 답변 : 보통 함수와 접근 지정자를 통해서 캡슐화를 유지하지만 friend를 사용하는 이유는 다음과 같습니다. 1.특별한 접근 권한 부여 2.정보 은폐를 유지하면서 유연성 확보 3.연산자 오버로딩 4.서로 다른 클래스 간의 협력
    

---

- 이 문제의 핵심 포인트
복사 생성자로 값을 넘기는 것과 참조값으로 넘겨보기
- 이 문제에 대한 접근 방법
    
    복사 생성자로 코드 구현, 참조값으로 값을 리턴하도록 코드 구현
    
- 내가 짠 코드
    - 복사 생성자로 코드 구현
        
        #include <iostream>
        using namespace std;
        class Power {
        int kick;
        int punch;
        public:
        Power(int kick=0, int punch=0) {
        this->kick = kick; this->punch = punch;
        }
        void show();
        Power operator++ (int op2);
        };
        void Power::show() {
        cout << "kick=" << kick << ',' << "punch=" << punch << endl;
        }
        Power Power::operator++(int op2) {
        kick++;
        punch++;
        return *this;
        }
        int main() {
        Power a(3,5), b;
        a.show();
        b.show();
        b = a++;
        a.show();
        b.show();
        }
        
        결과 → 
        
        /Users/sunyeong/CLionProjects/untitled/cmake-build-debug/untitled
        kick=3,punch=5
        kick=0,punch=0
        kick=4,punch=6
        kick=4,punch=6
        
        Process finished with exit code 0
        
    - 참조값으로 코드 구현
        
        #include <iostream>
        using namespace std;
        class Power {
        int kick;
        int punch;
        public:
        Power(int kick=0, int punch=0) {
        this->kick = kick; this->punch = punch;
        }
        void show();
        Power& operator++ ();
        };
        void Power::show() {
        cout << "kick=" << kick << ',' << "punch=" << punch << endl;
        }
        Power& Power::operator++() {
        kick++;
        punch++;
        return *this;
        }int main() {
        Power a(3,5), b;
        a.show();
        b.show();
        b = ++a;
        a.show();
        b.show();
        }
        
        실행 결과
        
        Users/sunyeong/CLionProjects/untitled/cmake-build-debug/untitled
        kick=3,punch=5
        kick=0,punch=0
        kick=4,punch=6
        kick=4,punch=6
        
        Process finished with exit code 0
        
- 코드를 짤때 어려웠던 점
    
    → 수업을 들었지만 아직 복사 생성자와 참조값을 넘기는 것에 대한 이해가 부족한것 같아서 많이 어려웠다. 수업이 끝난 이후 복습을 통해 완벽히 내것으로 만들어야 겠다.
    

---

- 이 문제의 핵심 포인트
b = 2 + a 를 처리할 수 있는 operator 함수를 코딩하는 것이 핵심
- 이 문제에 대한 접근 방법
    
    b = 2. + (a)가 불가능 하기 때문에 b = + (2, a);  로 변환하고 friend 선언한 operator에 대입하여 처리해줌
    
- 내가 짠 코드
    
    #include <iostream>
    using namespace std;
    class Power {
    int kick;
    int punch;
    public:
    Power(int kick=0, int punch=0) {
    this->kick = kick; this->punch = punch;
    }
    void show();
    friend Power operator+(int op1, Power op2);
    };
    void Power::show() {
    cout << "kick=" << kick << ',' << "punch=" << punch << endl;
    }
    Power operator+(int op1, Power op2) {
    Power tmp;
    tmp.kick = op1 + op2.kick;
    tmp.punch = op1 + op2.punch;
    return tmp; ]
    }int main() {
    Power a(3,5), b;
    a.show();
    b.show();
    b = 2 + a;
    a.show();
    b.show();
    }
    
- 코드를 짤때 어려웠던 점
    
    위 예제 때 느꼈던 것과 동일함
    
- 실행 결과
    
    /Users/sunyeong/CLionProjects/untitled/cmake-build-debug/untitled
    kick=3,punch=5
    kick=0,punch=0
    kick=3,punch=5
    kick=5,punch=7
    
    Process finished with exit code 0
