# 객체지향 프로그래밍 정리 12주차

---

예제 10-1 제네릭 myswap() 함수 만들기

코딩한 사람 : 윤선영
정리한 사람 : 최영민

- 이 문제의 핵심 포인트
제네릭 함수를 사용하여 함수에 타입을 먼저 선언하지 않고 구체화 및 호출을 진행할 때 컴파일러가 각 선언한 타입에 맞게 타입을 선언하도록 코드를 구현하는 것
- 이 문제에 대한 접근 방법
    
    제네릭 함수를 선언하고 그 안에 swap에 대한 로직을 구현한다.
    
- 내가 짠 코드
    
    #include <iostream>
    using namespace std;
    class Circle {
    int radius;
    public:
    Circle(int radius=1) { this->radius = radius; }
    int getRadius() { return radius; }
    };
    
    template <class T>
    void myswap(T & a, T & b) {
    T tmp;
    tmp = a;
    a = b;
    b = tmp;
    }
    
    int main() {
    int a=4, b=5;
    myswap(a, b);
    cout << "a=" << a << ", " << "b=" << b << endl;
    double c=0.3, d=12.5;
    myswap(c, d);
    cout << "c=" << c << ", " << "d=" << d << endl;
    Circle donut(5), pizza(20);
    myswap(donut, pizza);
    cout << "donut반지름=" << donut.getRadius() << ", ";
    cout << "pizza반지름=" << pizza.getRadius()<< endl;
    }
    
- 코드를 짤때 어려웠던 점
    
    Myswap 함수 즉, 제네릭함수를 만들어 본 경험이 없어 어떤식으로 구현해야 할지 생각이 잘 나지 않았음
    
- 실행 결과
    
    a=5, b=4
    c=12.5, d=0.3
    donut반지름=20, pizza반지름=5
    
- 코드를 짤때 의문
    
    최영민 : 하나의 타입의 경우 제네릭 함수를 사용하는 것은 이해했으나 다른 타입 여러개를 매개변수로 받는 제네릭 함수는 없는지?
    

---

템플릿 개념 정리

- 장점
    
    → 함수 코드의 재사용
    
- 단점
    
    → 가독성이 떨어짐
    
    → 컴팡일러에 따라 지원하지 않는 경우도 있음 ( 컴파일 오류 메세지가 뜨지 않을 수도 있음 + 디버깅에 많은 어려움 )
    
- 제네릭 프로그래밍
    
    → 일반화 프로그래밍이라고도 부르며 제네릭 함수나 제네릭 클래스를 활용하는 프로그래밍 기법 + STL 제공
    

---

예제 10-2 큰 값을 리턴하는 bigger() 함수 만들기 연습

- 이 문제의 핵심 포인트
위에서 연습했던 제네릭 함수 다시한번 연습해보기
- 이 문제에 대한 접근 방법
    
    bigger()라는 제네릭 함수를 구현하여 제네릭 함수 생성 연습해보기
    
- 내가 짠 코드
    
    #include <iostream>
    using namespace std;
    template <class T>
    T bigger(T a, T b) { 
    if(a > b)
    return a;
    else
    return b;
    }
    int main() {
    int a=20, b=50;
    char c='a', d='z';
    cout << "bigger(20, 50)의 결과는 " << bigger(a, b) << endl;
    cout << "bigger('a', 'z')의 결과는 " << bigger(c, d) << endl;
    }
    
- 코드를 짤때 어려웠던 점
    
    위에서 한번 연습을 하고 다시한번 작성을 해봐서 맨 처음 진행했을때 보단 비교적 쉽게 작성함 , 제네릭 함수의 사용법에 대해 점점 익숙해지는 중
    
- 실행 결과
    
    bigger(20, 50)의 결과는 50
    bigger('a', 'z')의 결과는 z
    

---

예제 10-4 배열을 복사하는 제네릭 함수 mycopy() 함수 만들기 연습

- 이 문제의 핵심 포인트
2개의 매개변수를 받아 제네릭 함수를 생성하는 것
- 이 문제에 대한 접근 방법
    
    2개의 매개변수를 선언하고 각각 다른 타입으로 구체화 해보기
    
- 내가 짠 코드
    
    #include <iostream>
    using namespace std;
    
    template <class T1, class T2>
    void mcopy(T1 src [], T2 dest [], int n) { 
    for(int i=0; i<n; i++)
    dest[i] = (T2)src[i]; 
    }
    int main() {
    int x[] = {1,2,3,4,5};
    double d[5];
    char c[5] = {'H', 'e', 'l', 'l', 'o'}, e[5];
    mcopy(x, d, 5); 
    mcopy(c, e, 5); 
    for(int i=0; i<5; i++) cout << d[i] << ' '; 
    cout << endl;
    for(int i=0; i<5; i++) cout << e[i] << ' '; 
    cout << endl;
    }
    
- 코드를 짤때 어려웠던 점
    
    서로 다른 타입의 매개변수를 받을 때는 제네릭 함수를 사용할 수 없는지 의문이 들었는데 그에 대한 해답을 찾을 수 있었던 예제였음
    
- 실행 결과
    
    1 2 3 4 5
    H e l l o
    

---

예제 10-6 제네릭 스택 클래스 만들기

- 이 문제의 핵심 포인트
제너릭 클래스에 대한 이해를 통해서 값의 형태에 맞는 클래스 형태 생각하기
- 이 문제에 대한 접근 방법
    
    일단 결과 값을 보고 결과 값의 형태에 따라 클래스 형태를 어떻게 해야할지 생각하고 각 형태에 따라 코드를 작성해야함
    
- 내가 짠 코드
    
    #include using namespace std;
    template class MyStack {
    int tos;
    T data [100];
    public:
    MyStack();
    void push(T element);
    T pop();
    };
    template MyStack::MyStack() {
    tos = -1;
    }
    template void MyStack::push(T element) {
    if(tos == 99) {
    cout << "stack full";
    return;
    }
    tos++;
    data[tos] = element;
    }
    template T MyStack::pop() {
    T retData;
    if(tos == -1) {
    cout << "stack empty"; return 0;
    }
    retData = data[tos—];
    return retData;
    }
    int main() {
    MyStack iStack;
    iStack.push(3);
    cout << iStack.pop() << endl;
    
    MyStack dStack;
    dStack.push(3.5);
    cout << dStack.pop() << endl;
    
    MyStack *p = new MyStack();
    p->push('a');
    cout << p->pop() << endl; delete p;
    }
    
- 코드를 짤때 어려웠던 점
    
    제네릭 스택 클래스의 형태에 맞게 코드를 생각하기 쉽지 않았음.
    
- 실행 결과
    
    3
    3.5
    a
    

---

예제 10-8 두 개의 제네릭 타입을 가진 클래스 만들기

- 이 문제의 핵심 포인트
다양한 타입의 제너릭 클래스를 생각하고 여러 제너릭 타입을 한 코드에 존재할 수 있음
- 이 문제에 대한 접근 방법
제너릭 클래스는 타입에 따라 여러개 존재 가능 하므로 그에 맞는 타입에 따라 결과 값에 맞춰 코드를 작성해야함
- 내가 짠 코드
#include using namespace std;
template <class T1, class T2>
class GClass {
T1 data1; T2 data2;
public:
GClass();
void set(T1 a, T2 b);
void get(T1 &a, T2 &b);
};
template GClass::GClass() {
data1 = 0; data2 = 0;
}
template void GClass::set(T1 a, T2 b) {
data1 = a; data2 = b;
}
template void GClass::get(T1 & a, T2 & b) {
a = data1; b = data2;
}
int main() {
int a;
double b;
GClass <int, double> x;
x.set(2, 0.5);
x.get(a, b);
cout << "a=" << a << '\t' << "b=" << b << endl;

char c;
float d;
GClass y;
y.set('m', 12.5);
y.get(c, d);
cout << "c=" << c << '\t' << "d=" << d << endl;
}

- 코드를 짤때 어려웠던 점
제네릭 타입을 달리하여 코드를 다르게 작성해야한다는 점, 각 결과에 맞게 코드를 다르게 생각해내기 어려웠음
- 실행 결과
a=2 b=0.5
c=m d=12.5

---

예제 10-9 vector 컨테이너 활용하기

- 이 문제의 핵심 포인트
벡터 컨테이너 이해하고 활용하기

- 이 문제에 대한 접근 방법
벡터 개념 이해하기 -> 벡터 생성 후 벡터 함수 활용하여 코드 작성

- 내가 짠 코드
    
    #include <iostream>
    #include <vector>
    using namespace std;
    int main() {
    vector<int> v; 
    v.push_back(1); 
    v.push_back(2); 
    v.push_back(3); 
    for(int i=0; i<v.size(); i++) 
    cout << v[i] << " ";
    cout << endl;
    v[0] = 10; 
    int n = v[2]; 
    [v.at](http://v.at/)(2) = 5; 
    for(int i=0; i<v.size(); i++) 
    cout << v[i] << " "; 
    cout << endl;
    }
    

- 실행 결과
1 2 3
10 2 5

- 코드를 짜면서 어려웠던 점
    
    배열의 개념은 알고있었지만 함수를 통해서 가변 배열을 구현한 것은 처음이라 익숙하지 않았습니다. 그래도 배열과 개념적으로 큰 차이는 없어서 비교적 쉬웠던것 같습니다.
    

---

예제 10-11 iterator 를 사용하여 vector의 모든 원소에 2 곱하기

- 이 문제의 핵심 포인트
vector와 vector::iterator를 사용하여 벡터의 요소에 접근하고 수정해야함
- 이 문제에 대한 접근 방법
1.vector를 정의하고 요소를 추가함
2.vector::iterator를 사용하여 벡터의 각 요소에 접근함
3.반복문을 사용하여 각 요소를 2배로 만들고 해당 값을 다시 벡터에 할당
- 내가 짠 코드
#include <iostream>
#include <vector>
using namespace std;
int main() {
vector v;
v.push_back(1);
v.push_back(2);
v.push_back(3);
vector::iterator it;
    
    for(it=v.begin(); it != v.end(); it++) {
    int n = *it;
    n = n*2;
    
    2 *it = n;
    }
    
    for(it=v.begin(); it != v.end(); it++)
    cout << *it << ' '; cout << endl;
    }
    
- 코드를 짤때 어려웠던 점
코드에서 vector::iterator를 사용하여 벡터의 요소에 접근하고 수정하는 부분에서 포인터 및 참조에 대한 이해가 필요해서 어려웠음
- 실행 결과
2 4 6
