# 객체지향 프로그래밍 정리 11주차

코딩한 사람 : 최영민
정리한 사람 : 윤선영

---

배웠던 개념 정리 (이해를 돕기 위해 추가적으로 검색)

- 가상함수
    
    → virtual () 로 선언하며 동적 바인딩의 지시어로 사용됨 
    
    → 런타임 시 동적으로 연결되어 객체의 실제 타입에 따라 적절한 함수를 호출
    
- 오버라이딩
    
    → 파생 클래스에서 기본 클래스의 가상 함수와 동일한 이름의 함수 선언
    
    → 부모 클래스에서 가상함수로 선언해주어야 하며 파생 클래스에서 같은 이름 , 같은 매개변수를 가진 함수를 만들면 프로그램이 실행 중에 객체의 실제 타입을 고려하여 적절한 함수를 호출 
    
- 가상함수와 오버라이딩의 차이점
    
    → 모든 가상함수는 오버라이드 될 수 있지만, 모든 오버라이딩 된 함수가 가상 함수일 필요는 없음
    
- 동적 바인딩
    
    → 런 타임시 객체의 실제 타입에 따라 적절한 메소드나 함수를 호출하는 것
    
    → 가상 함수의 호출을 가능하게 해줌
    
- 정적 바인딩
    
    → 범위 지정 연산자를 사용하여 정적 바인딩을 지시 할 수있으며 파생 클래스가 아닌 기본 클래스를 지정 가능함
    

→ 출처 : Google

---

예제 9-2 오버라이딩과 가상 함수 호출

- 이 문제의 핵심 포인트
이번 예제를 풀면서 오버라이딩과 가상함수의 차이점을 아는 것이 출제 의도
- 이 문제에 대한 접근 방법
    
    가상함수를 선언하면서 클래스를 만들고 그 클래스를 사용하여 함수 호출을 하는 것이 포인트임
    
- 내가 짠 코드
    
    #include <iostream>
    using namespace std;
    class Base {
    public:
    virtual void f() { cout << "Base::f() called" << endl; }
    };
    class Derived : public Base {
    public:
    virtual void f() { cout << "Derived::f() called" << endl; }
    };int main() {
    Derived d, *pDer;
    pDer = &d;
    pDer->f();
    Base * pBase;
    pBase = pDer;
    pBase->f();
    }
    
- 코드를 짤때 어려웠던 점
    
    자바를 공부할 때 오버라이딩에 대해서는 배운적이 있었으나 가상함수에 대해서는 들어본 적이 없어서 새로운 개념을 적용시키는데 어색함이 많았고 코드를 짜 보았으나 아직 완벽하게 가상함수와 오버라이딩에 대한 차이점을 이해하지 못한 것 같습니다. + 위에 개념 추가 정리
    
- 실행 결과
    
    Derived::f() called
    Derived::f() called
    
    ---
    
    예제 9-3 상속이 반복되는 경우 가상 함수 호출
    
    - 이 문제의 핵심 포인트
    상속이 반복되는 파생 클래스로 가상 함수를 호출함에 따라 각 클래스가 포인터에 할당된 객체의 실제 유형에 따라 동적으로 올바른 함수가 호출되는 것을 확인할 수 있음
    - 이 문제에 대한 접근 방법
    가상함수를 사용하여 클래스를 생성하고 그 클래스를 상속을 받은 클래스를 생성하고 그 클래스를 또 상속하는 경우로 이 관계를 파악하여 클래스에 접근해야 함
    - 내가 짠 코드
    class Base {
    public:
    virtual void f() { cout << "Base::f() called" << endl; }
    };
    class Derived : public Base {
    public:
    void f() { cout << "Derived::f() called" << endl; }
    };
    class GrandDerived : public Derived {
    public:
    void f() { cout << "GrandDerived::f() called" << endl; }
    };
    int main() {
    GrandDerived g;
    Base *bp;
    Derived *dp;
    GrandDerived *gp;
    bp = dp = gp = &g;
    bp->f();
    dp->f();
    gp->f();
    }
    - 코드를 짤때 어려웠던 점
    클래스가 상속이 반복될 수 있으며 f()함수의 재정의가 반복되어진다는 것에서 있어 생각해내기 힘들었음
    - 실행 결과
    GrandDerived::f() called
    GrandDerived::f() called
    GrandDerived::f() called
    

---

예제 9-6 소멸자를 가상 함수로 선언

- 이 문제의 핵심 포인트
가상 소멸자가 다형성을 지원하며 가상 소멸자에 접근하는 것
- 이 문제에 대한 접근 방법
소멸자를 가상 함수로 선언한 클래스를 각각 짜고 이 클래스를 포인터를 사용하여 클래스의 객체에 접근 함
- 내가 짠 코드
#include using namespace std;
class Base {
public: virtual ~Base() { cout << "~Base()" << endl; }
};
class Derived: public Base {
public: virtual ~Derived() { cout << "~Derived()" << endl; }
};
int main() {
Derived *dp = new Derived();
Base *bp = new Derived();
delete dp;
    
    delete bp;
    }
    
- 코드를 짤때 어려웠던 점
소멸자를 가상 함수로 선언한다는 점이 접근하기 어려웠음
- 실행 결과
~Derived()
~Base()
~Derived()
~Base()
- 에러코드 and 이유
- 이거를 다시 한번 수정해서 컴파일

---

오버로딩, 오버라이딩, 함수 재정의 

- 오버로딩
    - 정의 → 매개 변수 타입이나 갯수가 다르지 않지만 이름이 같은 함수들이 중복 작성
    - 존재 → 클래스의 맴버들 사이, 외부 함수들 사이, 그리고 기본 클래스의 파생 클래스 사이에서 존재 가능
    - 목적 → 이름이 같은 여러개의 함수를 중복 작성하여 편의성을 향상시키기 위해
    - 바인딩 → 정적 바인딩, 컴파일 시에 중복된 함수들의 호출 구분
    - 객체지향 특성 → 컴파일 시간 다형성
- 함수 재정의
    - 정의 → 기본 클래스의 맴버 함수를 파생 클래스에서 이름, 매개 변수, 타입과 개수, 리턴 타입까지 완벽한 원형으로 재작성 하는 것
    - 존재 → 상속 관계
    - 목적 → 기본 클래스의 맴버 함수와 별도로 파생 클래스에서 필요하며 재작성
    - 바인딩 → 정적 바인딩, 컴파일 시에 함수의 호출 구분
    - 객체지향 특성 → 컴파일 시간 다형성
- 오버 라이딩
    - 정의 → 기본 클래스의 가상 함수를 파생 클래스에서 이름, 매개 변수 타입과 개수, 리턴 타입까지 완벽하게 같은 원형으로 재작성 하는 것
    - 존재 → 상속 관계
    - 목적 → 기본 클래스에 구현된 가상 함수를 무시하고 파생 클래스에서 새로운 기능으로 재작성하기 위해서
    - 바인딩 → 동적 바인딩, 실행 시간에 오버라이딩된 함수를 찾아 실행
    - 객체지향 특성 → 실행 시간 다형성

---

- 순수 가상 함수
    
    → 함수의 코드가 없고 서언만 있는 가상 멤버 함수
    
- 추상 클래스
    
    → 최소한 하나의 순수 가상 함수를 가진 클래스 (객체 생성 불가능 and 포인터만 선언 가능)
    
    → 추상 클래스의 목적 : 상속에서 기본 클래스의 역할을 하기 위함 (순수 가상 함수를 통해 파생 클래스에서 구현할 함수의 형태를 보여주는 인터페이스 역할을 해줌)
    

---

예제 9-7 (실습) 추상 클래스를 상속받는 파생 클래스 구현 연습

- 이 문제의 핵심 포인트
클래스의 가상함수를 보고 결과 값에 맞게 파생 클래스를 나눠서 구현해야함.
- 이 문제에 대한 접근 방법
순수 가상 함수를 가진 클래스인 calculator 클래스 상속하는 파생 클래스인 adder 클래스와 subtractor 클래스에서 순수가상함수 cal을 구현한 파생 클래스를 짜야함
- 내가 짠 코드
#include using namespace std;
class Calculator {
void input() { cout << "정수 2 개를 입력하세요>> "; cin >> a >> b; }
protected:
int a, b;
virtual int calc(int a, int b) = 0;
public:
void run() {
input(); cout << "계산된 값은 " << calc(a, b) << endl; }
};
int main() {
Adder adder;
Subtractor subtractor;
adder.run();
subtractor.run();
}
- 코드를 짤때 어려웠던 점
클래스의 순수 가상함수를 파생 클래스까지 연결되어 파생클래스에서도 가상 함수를 구현하고 파생클래스의 객체를 다루는 것이 어려웠다.
- 실행 결과
class Adder : public Calculator {
protected: int calc(int a, int b) {
return a + b;
}
};
class Subtractor : public Calculator {
protected: int calc(int a, int b) {
return a - b; }
};
